TODO:
* implement server.launch
- flesh out read and write threads
- implement parser and lexer
* implement setBreakpoints
- flesh out MICommand design
- flesh out client.breakpoint event


BACKLOG:
* client should take arguments from user, e.g. target, attach or launch, working dir, etc.
* client should take input and output streams as args
* figure out (understand how it works) how to override threadpool like in DSPDebugTarget

DONE:
* model architecture
* fix com.boris.debug.com.boris.debug package name
* implement client launcher from client


BUGS:
* sometimes reader thread doesn't see "(gdb)" output on process startup


Code references:
https://github.com/dlsniper/ideagdb/blob/master/src/uk/co/cwspencer/gdb/Gdb.java

GDB:
https://sourceware.org/gdb/onlinedocs/gdb/index.html#Top

DAP Specification:
https://microsoft.github.io/debug-adapter-protocol/specification


ARCHITECTURE
============
Server
******
GdbDebugProtocolServer
* launches gdb process
* create reader thread for listening to gdb stdout process stream, fires events for client
* create writer thread for writing to gdb stdin process stream, called by client
* queue of commands waiting to be sent to gdb
* queue of pending commands waiting for a response from gdb

ReaderThread
* parser any incoming strings from gdb stdout

WriterThread
* writes command to gdb stdin

Command
* representation of command that is written to gdb

MILexer
* lexical analysis of GDB/MI output

MIParser
* parser for GDB/MI output


Client
******
