package com.boris.debug.client;

import com.boris.debug.utils.Utils;
import org.eclipse.lsp4j.debug.Capabilities;
import org.eclipse.lsp4j.debug.InitializeRequestArguments;
import org.eclipse.lsp4j.debug.launch.DSPLauncher;
import org.eclipse.lsp4j.debug.services.IDebugProtocolClient;
import org.eclipse.lsp4j.debug.services.IDebugProtocolServer;
import org.eclipse.lsp4j.jsonrpc.Launcher;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;

public class GdbDebugClient implements IDebugProtocolClient {
    /**
     * lsp4e DSPDebugTarget for reference:
     * https://github.com/vladdu/lsp4e/blob/6f48292b40bb66593790e8c11415722cdeb9c4e3/org.eclipse.lsp4e.debug/src/org/eclipse/lsp4e/debug/debugmodel/DSPDebugTarget.java
     */

    private InputStream in;
    private OutputStream out;
    private ExecutorService threadPool;

    private Future<?> debugProtocolFuture;
    private IDebugProtocolServer debugProtocolServer;
    private Capabilities capabilities;

    public GdbDebugClient(InputStream in , OutputStream out) {
        this.in = in;
        this.out = out;
    }

    public void initialize() throws ExecutionException, InterruptedException {
        /**
         * TODO
         *
         * - create client launcher -- DSPLauncher.createClientLauncher
         * - initialize DPS -- dps.initialize()
         * - launch DPS or attach DPS -- dps.launch() or dps.attach()
         * - tell DPS configuration is done -- dps.configurationDone()
         *
         * - want a thread pool to handle events generated by DPS, e.g. stopped()
         */

        Launcher<IDebugProtocolServer> debugProtocolServerLauncher = DSPLauncher.createClientLauncher(this, in, out);
        debugProtocolFuture = debugProtocolServerLauncher.startListening();
        debugProtocolServer = debugProtocolServerLauncher.getRemoteProxy();

        Utils.debug(this.getClass().getSimpleName() + " -- initializing GDB debug adapter..");

        InitializeRequestArguments arguments = new InitializeRequestArguments();
        arguments.setClientID("com.boris.debug");
        arguments.setAdapterID("adapterId"); // TODO must not be null so initializing
        arguments.setPathFormat("path");
        arguments.setSupportsVariableType(true);
        arguments.setSupportsVariablePaging(true);
        arguments.setLinesStartAt1(true);
        arguments.setColumnsStartAt1(true);
        arguments.setSupportsRunInTerminalRequest(true);

        CompletableFuture<?> future = debugProtocolServer.initialize(arguments);
        capabilities = (Capabilities) future.get();
        Utils.debug(this.getClass().getSimpleName() + " -- initialize future returned");

        Utils.debug(this.getClass().getSimpleName() + " -- launching GDB debug adapter..");
        Map<String, Object> launchArgs = new HashMap<>();
        future = debugProtocolServer.launch(launchArgs);
        future.get();
    }

    @Override
    public void initialized() {
        Utils.debug(this.getClass().getSimpleName() + " initialized() event called");
    }

    public IDebugProtocolServer getDebugProtocolServer() {
        return debugProtocolServer;
    }
}
